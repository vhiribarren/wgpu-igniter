
// Generated by build.rs, do not modify

use assert_cmd::Command;
use escargot;
use std::time::Duration;

const TIMEOUT_DURATION: Duration = Duration::from_secs(10);

macro_rules! generate_test_case {
    ($funcname:ident, $testname:tt) => {
        #[test]
        fn $funcname() {
            let example_under_test = escargot::CargoBuild::new()
                .example($testname)
                .run()
                .unwrap();
            Command::from_std(example_under_test.command())
                .env("HEADLESS", "true")
                .timeout(TIMEOUT_DURATION)
                .assert()
                .success();
        }
    }
}

generate_test_case!(example_canvas_raw_doesnt_panic, "canvas_raw");
generate_test_case!(example_cube_instances_doesnt_panic, "cube_instances");
generate_test_case!(example_cube_normals_doesnt_panic, "cube_normals");
generate_test_case!(example_cube_shader_transition_doesnt_panic, "cube_shader_transition");
generate_test_case!(example_cube_simple_doesnt_panic, "cube_simple");
generate_test_case!(example_cube_two_doesnt_panic, "cube_two");
generate_test_case!(example_triangle_direct_doesnt_panic, "triangle_direct");
