use cargo_metadata::MetadataCommand;
use std::fs::File;
use std::io::Write;
use std::path::Path;

const TEST_FILE_PATH: &str = "tests/run_examples_generated.rs";
const TEST_FILE_HEADER: &str = r#"
// Generated by build.rs, do not modify

use assert_cmd::Command;
use escargot;
use std::time::Duration;

const TIMEOUT_DURATION: Duration = Duration::from_secs(10);

macro_rules! generate_test_case {
    ($funcname:ident, $testname:tt) => {
        #[test]
        fn $funcname() {
            let example_under_test = escargot::CargoBuild::new()
                .example($testname)
                .run()
                .unwrap();
            Command::from_std(example_under_test.command())
                .env("HEADLESS", "true")
                .timeout(TIMEOUT_DURATION)
                .assert()
                .success();
        }
    }
}
"#;

fn main() {
    generate_example_tests();
    println!("cargo:rerun-if-changed=build.rs");
}

fn generate_example_tests() {
    let test_file_path = Path::new(TEST_FILE_PATH);
    let mut test_file =
        File::create(&test_file_path).expect(format!("Failed to create {TEST_FILE_PATH}").as_str());

    writeln!(test_file, "{TEST_FILE_HEADER}").unwrap();

    let metadata = MetadataCommand::new()
        .exec()
        .expect("Failed to fetch metadata");
    let workspace_members = metadata.workspace_members;
    let packages = metadata.packages;

    for package in packages {
        if !workspace_members.contains(&package.id) {
            continue;
        }
        for target in package.targets {
            if !target.is_example() {
                continue;
            }
            let example_name = target.name;
            let func_name = format!("example_{}_doesnt_panic", example_name.replace("-", "_"));
            writeln!(
                test_file,
                "generate_test_case!({func_name}, \"{example_name}\");"
            )
            .unwrap();
        }
    }
}
